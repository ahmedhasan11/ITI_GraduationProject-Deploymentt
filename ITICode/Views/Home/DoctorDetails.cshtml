@model ITI_Hackathon.ServiceContracts.DTO.DoctorApprovedDTO
@using System.Security.Claims
@using ITI_Hackathon.Entities
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Home Page";
    var userId = UserManager.GetUserId(User);
}

<style>
    :root {
        --primary-color: #2a7de1;
        --primary-light: #e8f2ff;
        --primary-gradient: linear-gradient(135deg, #2a7de1 0%, #3bbab5 100%);
        --secondary-color: #3bbab5;
        --secondary-light: #e6f7f6;
        --accent-color: #ff6b6b;
        --accent-light: #ffeeee;
        --light-bg: #f8fafc;
        --light-border: #e2e8f0;
        --dark-text: #1e293b;
        --light-text: #64748b;
        --success-color: #10b981;
        --success-gradient: linear-gradient(135deg, #10b981 0%, #0d9660 100%);
        --warning-color: #f59e0b;
        --card-shadow: 0 20px 40px rgba(0,0,0,0.08);
        --hover-shadow: 0 25px 50px rgba(0,0,0,0.12);
    }

    .doctor-container {
        background: linear-gradient(135deg, var(--light-bg) 0%, #f1f5f9 100%);
        color: var(--dark-text);
        min-height: 100vh;
        line-height: 1.6;
        max-width: 1200px;
        margin: 100px auto 30px;
        animation: fadeIn 0.8s ease-out;
        padding: 20px;
    }

    .doctor-card {
        background: #fff;
        border-radius: 20px;
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 40px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .doctor-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--hover-shadow);
        }

    .doctor-header {
        background: var(--primary-gradient);
        color: white;
        padding: 30px;
        position: relative;
        overflow: hidden;
    }

        .doctor-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 200%;
            background: rgba(255,255,255,0.1);
            transform: rotate(-15deg);
        }

        .doctor-header h2 {
            font-weight: 800;
            margin-bottom: 8px;
            font-size: 2.2rem;
            position: relative;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .doctor-header p {
            margin-bottom: 0;
            opacity: 0.9;
            font-size: 1.1rem;
            max-width: 80%;
            position: relative;
        }

    .doctor-badge {
        position: absolute;
        top: 25px;
        right: 25px;
        background: rgba(255,255,255,0.2);
        padding: 10px 18px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.3);
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    .doctor-body {
        padding: 30px;
    }

    .doctor-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
        margin-bottom: 35px;
    }

    .info-card {
        background: var(--light-bg);
        border-radius: 16px;
        padding: 25px;
        border-left: 5px solid var(--primary-color);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .info-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(42,125,225,0.05) 0%, rgba(59,186,181,0.05) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .info-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.08);
        }

            .info-card:hover::before {
                opacity: 1;
            }

        .info-card h5 {
            font-weight: 700;
            color: var(--dark-text);
            margin-bottom: 12px;
            font-size: 1.05rem;
            display: flex;
            align-items: center;
        }

            .info-card h5 i {
                margin-right: 10px;
                color: var(--primary-color);
                font-size: 1.2rem;
            }

        .info-card p {
            margin-bottom: 0;
            color: var(--light-text);
            font-size: 1rem;
            font-weight: 500;
        }

        .info-card.highlight {
            background: linear-gradient(135deg, var(--primary-light) 0%, var(--secondary-light) 100%);
            border-left: 5px solid var(--secondary-color);
        }

    .rating-stars {
        color: #ffc107;
        font-size: 1.4rem;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .action-buttons {
        display: flex;
        gap: 20px;
        margin-top: 35px;
        flex-wrap: wrap;
    }

    .btn-primary-custom {
        background: var(--primary-gradient);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s;
        box-shadow: 0 5px 15px rgba(42, 125, 225, 0.3);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .btn-primary-custom::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.7s ease;
        }

        .btn-primary-custom:hover::before {
            left: 100%;
        }

        .btn-primary-custom:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(42, 125, 225, 0.4);
        }

    .btn-outline-custom {
        background: transparent;
        border: 2px solid var(--primary-color);
        color: var(--primary-color);
        padding: 13px 28px;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        position: relative;
        overflow: hidden;
    }

        .btn-outline-custom::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background: var(--primary-color);
            transition: width 0.3s ease;
            z-index: -1;
        }

        .btn-outline-custom:hover::before {
            width: 100%;
        }

        .btn-outline-custom:hover {
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(42, 125, 225, 0.2);
        }

    .appointments-section {
        margin-top: 50px;
    }

    .section-title {
        font-weight: 800;
        margin-bottom: 30px;
        color: var(--dark-text);
        position: relative;
        padding-bottom: 15px;
        font-size: 1.8rem;
    }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 70px;
            height: 4px;
            background: var(--primary-gradient);
            border-radius: 4px;
        }

    .appointment-card {
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.06);
        padding: 25px;
        margin-bottom: 25px;
        transition: all 0.3s;
        border: 1px solid var(--light-border);
        position: relative;
        overflow: hidden;
    }

        .appointment-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 5px;
            height: 100%;
            background: var(--primary-gradient);
        }

        .appointment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        }

    .appointment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .appointment-date {
        font-weight: 700;
        color: var(--dark-text);
        font-size: 1.1rem;
    }

    .appointment-time {
        background: var(--primary-light);
        color: var(--primary-color);
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 0.95rem;
        font-weight: 600;
        box-shadow: 0 3px 8px rgba(42,125,225,0.15);
    }

    .appointment-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px dashed var(--light-border);
    }

    .book-btn {
        background: var(--success-gradient);
        border: none;
        color: white;
        padding: 10px 25px;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        box-shadow: 0 4px 12px rgba(16,185,129,0.3);
        cursor: pointer;
    }

        .book-btn:hover {
            background: linear-gradient(135deg, #0d9660 0%, #0a7a4d 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(16,185,129,0.4);
            color: white;
        }

    .no-appointments {
        text-align: center;
        padding: 50px 30px;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.06);
        margin-top: 20px;
    }

        .no-appointments i {
            font-size: 3.5rem;
            color: var(--light-text);
            margin-bottom: 20px;
            opacity: 0.7;
        }

        .no-appointments h5 {
            color: var(--dark-text);
            margin-bottom: 15px;
            font-weight: 700;
            font-size: 1.4rem;
        }

        .no-appointments p {
            color: var(--light-text);
            margin-bottom: 25px;
            font-size: 1.05rem;
        }

    .doctor-image {
        width: 100%;
        max-width: 280px;
        border-radius: 18px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        transition: transform 0.3s ease;
        border: 4px solid white;
    }

        .doctor-image:hover {
            transform: scale(1.03);
        }

    .specialty-badge {
        background: var(--secondary-light);
        color: var(--secondary-color);
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 0.9rem;
        font-weight: 600;
        display: inline-block;
        margin-bottom: 15px;
        box-shadow: 0 3px 8px rgba(59,186,181,0.15);
    }

    .bio-section {
        margin-top: 25px;
        padding: 20px;
        background: var(--light-bg);
        border-radius: 16px;
        border-left: 5px solid var(--primary-color);
    }

        .bio-section h5 {
            font-weight: 700;
            color: var(--dark-text);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            font-size: 1.2rem;
        }

            .bio-section h5 i {
                margin-right: 10px;
                color: var(--primary-color);
            }

    .text-muted {
        color: var(--light-text) !important;
        line-height: 1.7;
    }

    .rating-value {
        font-weight: 700;
        color: var(--dark-text);
        margin-left: 10px;
        font-size: 1.2rem;
    }

    /* Animations */
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    .pulse {
        animation: pulse 2s infinite;
    }

    /* Responsive Design */
    @@media (max-width: 992px) {
        .doctor-container

    {
        margin: 80px auto 40px;
    }

    .doctor-header h2 {
        font-size: 1.8rem;
    }

    .doctor-header p {
        font-size: 1rem;
    }

    }

    @@media (max-width: 768px) {
        .doctor-info-grid

    {
        grid-template-columns: 1fr;
    }

    .action-buttons {
        flex-direction: column;
    }

    .appointment-header, .appointment-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }

    .doctor-header {
        text-align: center;
        padding: 25px 20px;
    }

    .doctor-badge {
        position: relative;
        top: 0;
        right: 0;
        margin: 15px auto;
        display: inline-block;
    }

    .doctor-header p {
        max-width: 100%;
    }

    .section-title {
        font-size: 1.6rem;
    }

    .btn-primary-custom, .btn-outline-custom {
        width: 100%;
        justify-content: center;
    }

    }

    @@media (max-width: 576px) {
        body

    {
        padding: 15px;
    }

    .doctor-body {
        padding: 20px;
    }

    .info-card {
        padding: 20px;
    }

    .appointment-card {
        padding: 20px;
    }

    }
</style>

<div class="doctor-container">
    <!-- Doctor Card -->
    <div class="doctor-card">
        <div class="doctor-header">
            <h2><i class="fas fa-user-md me-2"></i> Dr. @Model.FullName</h2>
            <p>@(string.IsNullOrEmpty(Model.Bio) ? "No bio available" : Model.Bio)</p>
            <div class="doctor-badge">
                <span><i class="fas fa-shield-alt me-1"></i> Verified Doctor</span>
            </div>
        </div>

        <div class="doctor-body">
            <div class="row">
                <!-- Doctor Image & Rating -->
                <div class="col-md-4 text-center">
                    <img src="~/assets/images/user/avatar-1.jpg"
                         alt="Doctor Image"
                         class="doctor-image">

                    <!-- Rating -->
                    <div class="rating-stars mt-3">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Floor(Model.Rating))
                            {
                                <i class="fas fa-star"></i>
                            }
                            else if (i - 0.5 <= Model.Rating)
                            {
                                <i class="fas fa-star-half-alt"></i>
                            }
                            else
                            {
                                <i class="far fa-star"></i>
                            }
                        }
                        <span class="rating-value">@Model.Rating.ToString("0.0")/5</span>
                    </div>

                    <!-- Specialty -->
                    <div class="specialty-badge mt-2">
                        <i class="fas fa-stethoscope me-1"></i> @Model.Specialty
                    </div>
                </div>

                <!-- Doctor Info -->
                <div class="col-md-8">
                    <div class="doctor-info-grid">
                        <div class="info-card highlight">
                            <h5><i class="fas fa-certificate"></i> License Number</h5>
                            <p>@Model.LicenseNumber</p>
                        </div>

                        <div class="info-card">
                            <h5><i class="fas fa-envelope"></i> Email</h5>
                            <p>@Model.Email</p>
                        </div>

                        <div class="info-card">
                            <h5><i class="fas fa-phone"></i> Phone</h5>
                            <p>010033551242</p>
                        </div>
                    </div>

                    <!-- About Section -->
                    <div class="bio-section">
                        <h5><i class="fas fa-file-medical"></i> About Dr. @Model.FullName</h5>
                        <p class="text-muted">
                            @(string.IsNullOrEmpty(Model.Bio) ? "This doctor has not provided a biography yet." : Model.Bio)
                        </p>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button class="btn-primary-custom start-chat-btn"
                                data-doctor-id="@Model.UserId">
                            <i class="fa-solid fa-comments me-1"></i> Chat Now
                        </button>

                        <a asp-action="Index" class="btn-outline-custom">
                            <i class="fas fa-arrow-left me-2"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Appointments Section -->
    <div class="appointments-section">
        <h3 class="section-title"><i class="fas fa-calendar-check me-2"></i> Available Appointments</h3>

        <div class="row">
            @if (Model.AvailableAppointments != null && Model.AvailableAppointments.Any(a => !a.IsBooked && !a.IsCompleted))
            {
                @foreach (var appointment in Model.AvailableAppointments.Where(a => !a.IsBooked && !a.IsCompleted))
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="appointment-card">
                            <div class="appointment-header">
                                <div class="appointment-date">
                                    <i class="fas fa-calendar-day me-2"></i>@appointment.AppointmentDate.ToString("dd MMM yyyy")
                                </div>
                                <div class="appointment-time">
                                    <i class="fas fa-clock me-2"></i>@appointment.StartTime.ToString(@"hh\:mm") - @appointment.EndTime.ToString(@"hh\:mm")
                                </div>
                            </div>

                            <p class="text-muted"><i class="fas fa-star me-2"></i> Doctor Rating: @Model.Rating.ToString("0.0")/5</p>

                            <div class="appointment-footer">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form asp-controller="Appointment" asp-action="Book" method="post">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="appointmentId" value="@appointment.Id" />
                                        <button type="submit" class="book-btn">
                                            <i class="fas fa-calendar-check me-2"></i> Book Now
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <a asp-area="Identity" asp-page="/Account/Login" class="book-btn">
                                        <i class="fas fa-sign-in-alt me-1"></i> Login to Book
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-appointments mt-5">
                    <i class="fas fa-calendar-times"></i>
                    <h5>No Available Appointments</h5>
                    <p>This doctor doesn't have any available appointments at the moment.</p>
                    @if (User.IsInRole("Doctor") && User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Model.UserId)
                    {
                        <a asp-controller="Appointment" asp-action="Create" class="btn btn-primary mt-2">
                            <i class="fas fa-plus me-1"></i> Add Appointments
                        </a>
                    }
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @* Output anti-forgery hidden input so we can read token for AJAX if needed *@
    @Html.AntiForgeryToken()

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // subtle animation delays
            const cards = document.querySelectorAll('.info-card, .appointment-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
            });

            // Is user authenticated? (server-side value rendered as boolean)
            const isAuthenticated = @(User.Identity.IsAuthenticated.ToString().ToLower());
            const patientId = '@UserManager.GetUserId(User)'; // may be empty if anonymous

            function getAntiForgeryToken() {
                const input = document.querySelector('input[name="__RequestVerificationToken"]');
                return input ? input.value : null;
            }

            // Attach handler to both classes just in case (start-chat-btn used here, chat-now-btn elsewhere)
            document.querySelectorAll('.start-chat-btn, .chat-now-btn').forEach(btn => {
                btn.addEventListener('click', async function (e) {
                    e.preventDefault();

                    // If not logged in -> redirect to login page
                    if (!isAuthenticated) {
                        window.location.href = '@Url.Page("/Account/Login", new { area = "Identity" })';
                        return;
                    }

                    const doctorId = btn.dataset.doctorId;
                    if (!doctorId) {
                        console.error('start-chat: missing doctorId on button', btn);
                        alert('حدث خطأ: بيانات الطبيب ناقصة.');
                        return;
                    }

                    try {
                        const token = getAntiForgeryToken();
                        const headers = { 'Content-Type': 'application/json' };
                        if (token) headers['RequestVerificationToken'] = token;

                        const res = await fetch('/api/Chat/GetOrCreateThread', {
                            method: 'POST',
                            headers,
                            credentials: 'same-origin',
                            body: JSON.stringify({
                                patientId: patientId,
                                doctorId: doctorId
                            })
                        });

                        if (!res.ok) throw new Error('Network response was not ok: ' + res.status);

                        const data = await res.json();

                        if (data && data.success && data.thread && data.thread.id) {
                            // go to chat page
                            window.location.href = `/ChatPage/Index?threadId=${encodeURIComponent(data.thread.id)}`;
                        } else {
                            console.error('start-chat: server returned', data);
                            alert(data && data.message ? data.message : 'حدث خطأ أثناء بدء المحادثة.');
                        }
                    } catch (err) {
                        console.error('start-chat error', err);
                        alert('حدث خطأ أثناء محاولة بدء المحادثة. افتح console للمزيد من التفاصيل.');
                    }
                });
            });
        });
    </script>
}
