@using ITI_Hackathon.ServiceContracts.DTO
@model List<AppointmentDto>

@{
    ViewData["Title"] = "My Appointments";
}

<div class="appointments-container">
    <!-- Floating Background Elements -->
    <div class="floating-element float-1"></div>
    <div class="floating-element float-2"></div>
    <div class="floating-element float-3"></div>

    <!-- Enhanced Header -->
    <header class="page-header">
        <h2><i class="fas fa-calendar-medical"></i> My Appointments</h2>
        <p class="subtitle">Manage your scheduled, booked, and completed appointments with modern healthcare technology</p>
    </header>

    <!-- Enhanced Controls -->
    <div class="controls">
        <div class="filters" role="tablist" aria-label="Filter appointments by status">
            <a asp-action="MyAppointments" asp-route-filter="all"
               class="filter-btn @(ViewBag.Filter == "all" || ViewBag.Filter == null ? "active" : "")"
               role="tab" aria-selected="@(ViewBag.Filter == "all" || ViewBag.Filter == null ? "true" : "false")"
               aria-label="Show all appointments">
                <i class="fas fa-list"></i> All
            </a>
            <a asp-action="MyAppointments" asp-route-filter="available"
               class="filter-btn @(ViewBag.Filter == "available" ? "active" : "")"
               role="tab" aria-selected="@(ViewBag.Filter == "available" ? "true" : "false")"
               aria-label="Show available appointments">
                <i class="fas fa-calendar-check"></i> Available
            </a>
            <a asp-action="MyAppointments" asp-route-filter="booked"
               class="filter-btn @(ViewBag.Filter == "booked" ? "active" : "")"
               role="tab" aria-selected="@(ViewBag.Filter == "booked" ? "true" : "false")"
               aria-label="Show booked appointments">
                <i class="fas fa-clock"></i> Booked
            </a>
            <a asp-action="MyAppointments" asp-route-filter="completed"
               class="filter-btn @(ViewBag.Filter == "completed" ? "active" : "")"
               role="tab" aria-selected="@(ViewBag.Filter == "completed" ? "true" : "false")"
               aria-label="Show completed appointments">
                <i class="fas fa-check-circle"></i> Completed
            </a>
        </div>

        <div class="actions">
            <form asp-action="MyAppointments" method="get" class="search-form" role="search">
                <input type="hidden" name="filter" value="@ViewBag.Filter" />
                <div class="search-input-container">
                    <i class="fas fa-search search-icon" aria-hidden="true"></i>
                    <input type="text" name="searchTerm" placeholder="Search by patient name or date..."
                           value="@ViewBag.SearchTerm" aria-label="Search appointments" />
                </div>
                <button type="submit" class="btn-primary" aria-label="Search appointments">
                    <i class="fas fa-search"></i> Search
                </button>
            </form>

            <button class="btn-add-slot" onclick="openAddModal()" aria-label="Add new appointment slot">
                <i class="fas fa-plus"></i> Add Slot
            </button>
        </div>
    </div>

    <!-- Enhanced Appointments Display -->
    @if (!Model.Any())
    {
        <div class="empty-state">
            <i class="fas fa-calendar-times"></i>
            <h3>No appointments found</h3>
            <p>@(ViewBag.Filter != null ? $"No {ViewBag.Filter} appointments match your criteria." : "You don't have any appointments scheduled yet. Create your first appointment slot to get started.")</p>
            <button class="btn-primary" onclick="openAddModal()">
                <i class="fas fa-plus"></i> Schedule Your First Appointment
            </button>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="appointments-table" role="table" aria-label="Appointments list">
                <thead>
                    <tr role="row">
                        <th scope="col" class="serial-header">#</th>
                        <th scope="col"><i class="fas fa-calendar-day"></i> Date</th>
                        <th scope="col"><i class="fas fa-clock"></i> Time</th>
                        <th scope="col"><i class="fas fa-user"></i> Patient</th>
                        <th scope="col"><i class="fas fa-info-circle"></i> Status</th>
                        <th scope="col"><i class="fas fa-cogs"></i> Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var appt in Model.Select((value, index) => new { value, index }))
                    {
                        <tr class="appointment-row" role="row">
                            <td class="serial-number" role="cell">@(appt.index + 1)</td>
                            <td role="cell">
                                <div class="date-display">
                                    <div class="day">@appt.value.AppointmentDate.ToString("dd")</div>
                                    <div class="month">@appt.value.AppointmentDate.ToString("MMM")</div>
                                    <div class="year">@appt.value.AppointmentDate.ToString("yyyy")</div>
                                </div>
                            </td>
                            <td role="cell">
                                <div class="appointment-time">
                                    <i class="fas fa-clock time-icon" aria-hidden="true"></i>
                                    <span aria-label="Appointment time from @appt.value.StartTime.ToString(@"hh\:mm") to @appt.value.EndTime.ToString(@"hh\:mm")">
                                        @appt.value.StartTime.ToString(@"hh\:mm") - @appt.value.EndTime.ToString(@"hh\:mm")
                                    </span>
                                </div>
                            </td>
                            <td role="cell">
                                @if (appt.value.PatientName != null)
                                {
                                    <div class="patient-info">
                                        <div class="patient-avatar" aria-hidden="true">
                                            <i class="fas fa-user"></i>
                                        </div>
                                        <div class="patient-details">
                                            <div class="patient-name">@appt.value.PatientName</div>
                                            @if (1 == 1)
                                            {
                                                <div class="patient-email">Ahmed@gmail.com</div>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="patient-info">
                                        <div class="patient-avatar" aria-hidden="true">
                                            <i class="fas fa-user-slash"></i>
                                        </div>
                                        <div class="patient-details">
                                            <div class="not-booked">
                                                <i class="fas fa-calendar-times"></i>
                                                Slot Available
                                            </div>
                                        </div>
                                    </div>
                                }
                            </td>
                            <td role="cell">
                                @if (!appt.value.IsBooked)
                                {
                                    <span class="status-badge available" role="status" aria-label="Available appointment">
                                        <i class="fas fa-calendar-check"></i> Available
                                    </span>
                                }
                                else if (!appt.value.IsCompleted)
                                {
                                    <span class="status-badge booked" role="status" aria-label="Booked appointment">
                                        <i class="fas fa-clock"></i> Booked
                                    </span>
                                }
                                else if (!appt.value.IsRated)
                                {
                                    <span class="status-badge completed" role="status" aria-label="Completed appointment">
                                        <i class="fas fa-check-circle"></i> Completed
                                    </span>
                                }
                                else
                                {
                                    <span class="status-badge rated" role="status" aria-label="Rated appointment">
                                        <i class="fas fa-star"></i> Rated
                                    </span>
                                }
                            </td>
                            <td role="cell">
                                <div class="action-buttons" role="group" aria-label="Appointment actions">
                                    @if (appt.value.IsBooked && !appt.value.IsCompleted)
                                    {
                                        <button class="btn-action complete"
                                                onclick="openCompleteModal(@appt.value.Id)"
                                                title="Complete Appointment"
                                                aria-label="Mark appointment as completed">
                                            <i class="fas fa-check" aria-hidden="true"></i>
                                        </button>
                                    }
                                    @if (!appt.value.IsBooked)
                                    {
                                        <button class="btn-action delete"
                                                onclick="openDeleteModal(@appt.value.Id)"
                                                title="Delete Slot"
                                                aria-label="Delete appointment slot">
                                            <i class="fas fa-trash" aria-hidden="true"></i>
                                        </button>
                                    }
 @*                                    @if (appt.value.IsBooked || appt.value.IsCompleted)
                                    {
                                        <button class="btn-action view"
                                                onclick="viewAppointment(@appt.value.Id)"
                                                title="View Details"
                                                aria-label="View appointment details">
                                            <i class="fas fa-eye" aria-hidden="true"></i>
                                        </button>
                                    } *@
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Enhanced Add Appointment Modal -->
<div class="modal-overlay" id="addModal" role="dialog" aria-labelledby="addModalTitle" aria-modal="true">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="addModalTitle"><i class="fas fa-plus-circle"></i>Add Appointment Slot</h3>
            <button type="button" class="modal-close" onclick="closeModal('addModal')" aria-label="Close modal">
                <i class="fas fa-times" aria-hidden="true"></i>
            </button>
        </div>
        <form id="addAppointmentForm" asp-controller="Appointment" asp-action="Add" method="post">
            @Html.AntiForgeryToken()
            <div class="modal-body">
                <div class="form-group">
                    <label for="appointmentDate"><i class="fas fa-calendar-alt"></i> Appointment Date</label>
                    <input type="date" id="appointmentDate" name="AppointmentDate" class="form-control" required
                           min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="startTime"><i class="fas fa-clock"></i> Start Time</label>
                        <input type="time" id="startTime" name="StartTime" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="endTime"><i class="fas fa-clock"></i> End Time</label>
                        <input type="time" id="endTime" name="EndTime" class="form-control" required />
                    </div>
                </div>
                <div id="addError" class="error-message" style="display: none;">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span class="error-text"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" onclick="closeModal('addModal')">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="submit" class="btn-primary">
                    <i class="fas fa-plus"></i> Add Slot
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Enhanced Complete Appointment Modal -->
<div class="modal-overlay" id="completeModal" role="dialog" aria-labelledby="completeModalTitle" aria-modal="true">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="completeModalTitle"><i class="fas fa-check-circle"></i>Complete Appointment</h3>
            <button type="button" class="modal-close" onclick="closeModal('completeModal')" aria-label="Close modal">
                <i class="fas fa-times" aria-hidden="true"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="confirmation-content">
                <div class="confirmation-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <p>Are you sure you want to mark this appointment as completed? This action will notify the patient and update the appointment status.</p>
            </div>
            <div id="completeError" class="error-message" style="display: none;">
                <i class="fas fa-exclamation-triangle"></i>
                <span class="error-text"></span>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-secondary" onclick="closeModal('completeModal')">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button type="button" class="btn-primary" onclick="confirmComplete()">
                <i class="fas fa-check"></i> Yes, Complete
            </button>
        </div>
    </div>
</div>

<!-- Enhanced Delete Appointment Modal -->
<div class="modal-overlay" id="deleteModal" role="dialog" aria-labelledby="deleteModalTitle" aria-modal="true">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="deleteModalTitle"><i class="fas fa-trash-alt"></i>Delete Appointment Slot</h3>
            <button type="button" class="modal-close" onclick="closeModal('deleteModal')" aria-label="Close modal">
                <i class="fas fa-times" aria-hidden="true"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="confirmation-content">
                <div class="confirmation-icon danger">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <p>Are you sure you want to delete this appointment slot? This action cannot be undone and will permanently remove the slot from your schedule.</p>
            </div>
            <div id="deleteError" class="error-message" style="display: none;">
                <i class="fas fa-exclamation-triangle"></i>
                <span class="error-text"></span>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-secondary" onclick="closeModal('deleteModal')">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button type="button" class="btn-danger" onclick="confirmDelete()">
                <i class="fas fa-trash"></i> Yes, Delete
            </button>
        </div>
    </div>
</div>

<!-- Enhanced Toast Notifications -->
<div id="successToast" class="toast success">
    <div class="toast-content">
        <div class="toast-icon">
            <i class="fas fa-check-circle"></i>
        </div>
        <div>
            <div class="toast-title">Success!</div>
            <div class="toast-message"></div>
        </div>
    </div>
</div>

<div id="errorToast" class="toast error">
    <div class="toast-content">
        <div class="toast-icon">
            <i class="fas fa-exclamation-circle"></i>
        </div>
        <div>
            <div class="toast-title">Error!</div>
            <div class="toast-message"></div>
        </div>
    </div>
</div>

<div id="infoToast" class="toast info">
    <div class="toast-content">
        <div class="toast-icon">
            <i class="fas fa-info-circle"></i>
        </div>
        <div>
            <div class="toast-title">Info</div>
            <div class="toast-message"></div>
        </div>
    </div>
</div>

<!-- Hidden forms for backend integration -->
<form id="completeForm" asp-controller="Appointment" asp-action="CompleteAppointment" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" id="completeAppointmentId" name="appointmentId" />
</form>

<form id="deleteForm" asp-controller="Appointment" asp-action="DeleteAppointment" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" id="deleteAppointmentId" name="appointmentId" />
</form>

@section Styles {
    <style>
        /* Enhanced CSS Variables */
        :root {
            /* Core Colors */
            --primary-color: #2a7de1;
            --primary-dark: #1c65c1;
            --primary-light: #4b94e6;
            --secondary-color: #3bbab5;
            --secondary-dark: #2da39f;
            --accent-color: #ff6b6b;
            --accent-dark: #e55555;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
            /* Enhanced Backgrounds */
            --light-bg: #f8faff;
            --card-bg: #ffffff;
            --light-border: #e2e8f0;
            --soft-border: #f1f5f9;
            /* Text Colors */
            --dark-text: #1e293b;
            --medium-text: #475569;
            --light-text: #64748b;
            --muted-text: #94a3b8;
            /* Enhanced Gradients */
            --medical-gradient: linear-gradient(135deg, #2a7de1 0%, #3bbab5 50%, #4cd1c4 100%);
            --card-gradient: linear-gradient(145deg, #ffffff 0%, #f8faff 100%);
            --primary-gradient: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);
            --secondary-gradient: linear-gradient(135deg, var(--secondary-color) 0%, var(--secondary-dark) 100%);
            --glass-gradient: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0.1) 100%);
            /* Enhanced Shadows */
            --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            --glow-primary: 0 0 20px rgba(42, 125, 225, 0.3);
            --glow-secondary: 0 0 20px rgba(59, 186, 181, 0.3);
            /* Transitions & Animations */
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-fast: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
            --bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
            /* Spacing & Sizing */
            --border-radius: 12px;
            --border-radius-lg: 20px;
            --border-radius-xl: 24px;
            --border-radius-full: 9999px;
        }

        /* Base Styles */
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--light-bg);
            color: var(--dark-text);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* Enhanced Container */
        .appointments-container {
            padding: 9rem 1rem;
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
        }

        /* Enhanced Page Header */
        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
            z-index: 2;
        }

            .page-header h2 {
                font-size: 3rem;
                font-weight: 800;
                background: var(--medical-gradient);
                background-clip: text;
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 0.5rem;
                position: relative;
            }

                .page-header h2::after {
                    content: '';
                    position: absolute;
                    bottom: -10px;
                    left: 50%;
                    transform: translateX(-50%);
                    width: 100px;
                    height: 4px;
                    background: var(--medical-gradient);
                    border-radius: var(--border-radius-full);
                    animation: shimmer 2s ease-in-out infinite alternate;
                }

        @@keyframes shimmer {
            0%

        {
            opacity: 0.5;
            transform: translateX(-50%) scaleX(0.8);
        }

        100% {
            opacity: 1;
            transform: translateX(-50%) scaleX(1.2);
        }

        }

        .subtitle {
            font-size: 1.25rem;
            color: var(--medium-text);
            font-weight: 400;
            max-width: 600px;
            margin: 0 auto;
        }

        /* Enhanced Controls */
        .controls {
            background: var(--card-bg);
            border-radius: var(--border-radius-lg);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--soft-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1.5rem;
            position: relative;
            overflow: hidden;
        }

            .controls::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: var(--medical-gradient);
            }

        /* Enhanced Filters */
        .filters {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius-full);
            border: 2px solid var(--light-border);
            background: var(--card-bg);
            font-weight: 600;
            font-size: 0.875rem;
            transition: var(--transition);
            text-decoration: none;
            color: var(--medium-text);
            position: relative;
            overflow: hidden;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .filter-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: var(--primary-gradient);
                transition: left 0.3s var(--bounce);
                z-index: -1;
            }

            .filter-btn:hover::before,
            .filter-btn.active::before {
                left: 0;
            }

            .filter-btn:hover,
            .filter-btn.active {
                color: white;
                border-color: var(--primary-color);
                transform: translateY(-2px);
                box-shadow: var(--shadow-md);
            }

        /* Enhanced Actions */
        .actions {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-form {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .search-input-container {
            position: relative;
            min-width: 300px;
        }

            .search-input-container input {
                width: 100%;
                padding: 0.875rem 1rem 0.875rem 3rem;
                border-radius: var(--border-radius-full);
                border: 2px solid var(--light-border);
                background: var(--card-bg);
                font-size: 1rem;
                transition: var(--transition);
                box-shadow: var(--shadow-xs);
            }

                .search-input-container input:focus {
                    outline: none;
                    border-color: var(--primary-color);
                    box-shadow: var(--glow-primary);
                    transform: translateY(-1px);
                }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--light-text);
            font-size: 1.1rem;
        }

        /* Enhanced Buttons */
        .btn-primary {
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: var(--border-radius-full);
            padding: 0.875rem 2rem;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            box-shadow: var(--shadow-sm);
        }

            .btn-primary:hover {
                transform: translateY(-3px);
                box-shadow: var(--shadow-lg);
            }

        .btn-secondary {
            background: var(--card-bg);
            color: var(--medium-text);
            border: 2px solid var(--light-border);
            border-radius: var(--border-radius-full);
            padding: 0.875rem 2rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: var(--shadow-xs);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .btn-secondary:hover {
                background: var(--light-bg);
                border-color: var(--primary-color);
                color: var(--primary-color);
                transform: translateY(-2px);
                box-shadow: var(--shadow-md);
            }

        .btn-danger {
            background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-dark) 100%);
            color: white;
            border: none;
            border-radius: var(--border-radius-full);
            padding: 0.875rem 2rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: var(--shadow-sm);
        }

            .btn-danger:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
            }

        .btn-add-slot {
            background: var(--secondary-gradient);
            color: white;
            border: none;
            border-radius: var(--border-radius-full);
            padding: 0.875rem 1.75rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: var(--shadow-sm);
        }

            .btn-add-slot:hover {
                transform: translateY(-3px);
                box-shadow: var(--glow-secondary);
            }

        /* Enhanced Table */
        .table-container {
            background: var(--card-bg);
            border-radius: var(--border-radius-lg);
            overflow: hidden;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--soft-border);
            position: relative;
        }

            .table-container::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: var(--medical-gradient);
            }

        .appointments-table {
            width: 100%;
            border-collapse: collapse;
        }

            .appointments-table th {
                background: linear-gradient(135deg, rgba(42, 125, 225, 0.08), rgba(59, 186, 181, 0.08));
                padding: 1.5rem 1.25rem;
                text-align: left;
                font-weight: 700;
                color: var(--dark-text);
                font-size: 0.875rem;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                position: relative;
            }

                .appointments-table th::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2px;
                    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
                }

            .appointments-table td {
                padding: 1.25rem;
                border-bottom: 1px solid var(--soft-border);
                vertical-align: middle;
                transition: var(--transition-fast);
            }

            .appointments-table tr:last-child td {
                border-bottom: none;
            }

            .appointments-table tr:hover {
                background: linear-gradient(135deg, rgba(42, 125, 225, 0.02), rgba(59, 186, 181, 0.02));
                transform: translateX(2px);
            }

        .serial-number {
            font-weight: 700;
            color: var(--medium-text);
            text-align: center;
            font-size: 1.1rem;
        }

        /* Enhanced Date Display */
        .date-display {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-width: 80px;
            padding: 0.75rem;
            background: linear-gradient(135deg, rgba(42, 125, 225, 0.1), rgba(59, 186, 181, 0.1));
            border-radius: var(--border-radius);
            position: relative;
            overflow: hidden;
        }

            .date-display::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 3px;
                background: var(--primary-gradient);
            }

            .date-display .day {
                font-size: 1.75rem;
                font-weight: 800;
                color: var(--primary-color);
                line-height: 1;
            }

            .date-display .month {
                font-size: 0.875rem;
                font-weight: 600;
                color: var(--dark-text);
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .date-display .year {
                font-size: 0.75rem;
                color: var(--light-text);
                font-weight: 500;
            }

        /* Enhanced Time Display */
        .appointment-time {
            font-weight: 600;
            color: var(--dark-text);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1rem;
        }

        .time-icon {
            color: var(--secondary-color);
            font-size: 1.1rem;
        }

        /* Enhanced Patient Info */
        .patient-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .patient-avatar {
            width: 48px;
            height: 48px;
            border-radius: var(--border-radius-full);
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow-sm);
            position: relative;
            overflow: hidden;
        }

            .patient-avatar::after {
                content: '';
                position: absolute;
                inset: 2px;
                border-radius: var(--border-radius-full);
                background: var(--card-bg);
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .patient-avatar i {
                color: var(--primary-color);
                font-size: 1.25rem;
                z-index: 1;
            }

        .patient-details {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .patient-name {
            font-weight: 600;
            color: var(--dark-text);
            font-size: 1rem;
        }

        .patient-email {
            font-size: 0.875rem;
            color: var(--light-text);
        }

        .not-booked {
            color: var(--muted-text);
            font-style: italic;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Enhanced Status Badges */
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius-full);
            font-size: 0.875rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            position: relative;
            overflow: hidden;
        }

            .status-badge::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
                transition: left 0.6s ease;
            }

            .status-badge:hover::before {
                left: 100%;
            }

            .status-badge.available {
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.15), rgba(16, 185, 129, 0.1));
                color: var(--success-color);
                border: 1px solid rgba(16, 185, 129, 0.2);
            }

            .status-badge.booked {
                background: linear-gradient(135deg, rgba(245, 158, 11, 0.15), rgba(245, 158, 11, 0.1));
                color: var(--warning-color);
                border: 1px solid rgba(245, 158, 11, 0.2);
            }

            .status-badge.completed {
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.15), rgba(16, 185, 129, 0.1));
                color: var(--success-color);
                border: 1px solid rgba(16, 185, 129, 0.2);
            }

            .status-badge.rated {
                background: linear-gradient(135deg, rgba(147, 51, 234, 0.15), rgba(147, 51, 234, 0.1));
                color: #9333ea;
                border: 1px solid rgba(147, 51, 234, 0.2);
            }

        /* Enhanced Action Buttons */
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .btn-action {
            width: 40px;
            height: 40px;
            border-radius: var(--border-radius);
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.95rem;
            position: relative;
            overflow: hidden;
        }

            .btn-action.view {
                background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05));
                color: var(--info-color);
                border: 1px solid rgba(59, 130, 246, 0.2);
            }

                .btn-action.view:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
                }

            .btn-action.complete {
                background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
                color: var(--success-color);
                border: 1px solid rgba(16, 185, 129, 0.2);
            }

                .btn-action.complete:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.2);
                }

            .btn-action.delete {
                background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
                color: #ef4444;
                border: 1px solid rgba(239, 68, 68, 0.2);
            }

                .btn-action.delete:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2);
                }

        /* Enhanced Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(8px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s var(--bounce);
            padding: 1.25rem;
        }

            .modal-overlay.active {
                opacity: 1;
                visibility: visible;
            }

        .modal-content {
            background: var(--card-bg);
            border-radius: var(--border-radius-xl);
            width: 100%;
            max-width: 500px;
            box-shadow: var(--shadow-2xl);
            transform: translateY(30px) scale(0.9);
            transition: all 0.3s var(--bounce);
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .modal-overlay.active .modal-content {
            transform: translateY(0) scale(1);
        }

        .modal-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--soft-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, rgba(42, 125, 225, 0.05), rgba(59, 186, 181, 0.05));
            position: relative;
        }

            .modal-header::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: var(--medical-gradient);
            }

            .modal-header h3 {
                margin: 0;
                color: var(--dark-text);
                font-weight: 700;
                display: flex;
                align-items: center;
                gap: 0.75rem;
                font-size: 1.25rem;
            }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--light-text);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: var(--border-radius);
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

            .modal-close:hover {
                background: rgba(239, 68, 68, 0.1);
                color: #ef4444;
                transform: rotate(90deg);
            }

        .modal-body {
            padding: 2rem;
        }

        .modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid var(--soft-border);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            background: var(--light-bg);
        }

        /* Enhanced Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
        }

            .form-row .form-group {
                flex: 1;
            }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--dark-text);
            font-size: 0.95rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-control {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid var(--light-border);
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: var(--transition);
            background: var(--card-bg);
        }

            .form-control:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: var(--glow-primary);
                transform: translateY(-1px);
            }

        /* Enhanced Error Messages */
        .error-message {
            color: var(--accent-color);
            padding: 1rem 1.25rem;
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
            border-radius: var(--border-radius);
            margin-top: 1rem;
            border: 1px solid rgba(239, 68, 68, 0.2);
            border-left: 4px solid var(--accent-color);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .error-message i {
                font-size: 1.1rem;
            }

        /* Confirmation Content */
        .confirmation-content {
            text-align: center;
            padding: 1rem 0;
        }

        .confirmation-icon {
            width: 80px;
            height: 80px;
            border-radius: var(--border-radius-full);
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05));
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            border: 2px solid rgba(59, 130, 246, 0.2);
        }

            .confirmation-icon.danger {
                background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
                border-color: rgba(239, 68, 68, 0.2);
            }

            .confirmation-icon i {
                font-size: 2rem;
                color: var(--info-color);
            }

            .confirmation-icon.danger i {
                color: #ef4444;
            }

        /* Enhanced Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: var(--card-bg);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--soft-border);
            position: relative;
            overflow: hidden;
        }

            .empty-state::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: radial-gradient(circle, rgba(42, 125, 225, 0.05) 0%, transparent 70%);
                animation: rotate 20s linear infinite;
            }

            .empty-state > * {
                position: relative;
                z-index: 1;
            }

            .empty-state i {
                font-size: 5rem;
                color: var(--light-text);
                margin-bottom: 1.5rem;
                opacity: 0.4;
                animation: pulse 2s ease-in-out infinite alternate;
            }

            .empty-state h3 {
                color: var(--dark-text);
                margin-bottom: 0.75rem;
                font-weight: 700;
                font-size: 1.5rem;
            }

            .empty-state p {
                color: var(--light-text);
                margin-bottom: 2rem;
                font-size: 1.1rem;
                max-width: 500px;
                margin-left: auto;
                margin-right: auto;
            }

        /* Enhanced Toast Notifications */
        .toast {
            position: fixed;
            top: 2rem;
            right: 2rem;
            padding: 1rem 1.5rem;
            border-radius: var(--border-radius);
            color: white;
            z-index: 1100;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transform: translateX(120%);
            transition: all 0.4s var(--bounce);
            max-width: 400px;
            box-shadow: var(--shadow-lg);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .toast.show {
                transform: translateX(0);
            }

            .toast.success {
                background: linear-gradient(135deg, var(--success-color), #059669);
            }

            .toast.error {
                background: linear-gradient(135deg, var(--accent-color), var(--accent-dark));
            }

            .toast.info {
                background: linear-gradient(135deg, var(--info-color), #1d4ed8);
            }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex: 1;
        }

        .toast-icon {
            font-size: 1.25rem;
            opacity: 0.9;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .toast-message {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* Enhanced Floating Elements */
        .floating-element {
            position: absolute;
            border-radius: var(--border-radius-full);
            background: var(--glass-gradient);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: float 8s ease-in-out infinite;
            z-index: 0;
        }

        .float-1 {
            width: 100px;
            height: 100px;
            top: 10%;
            right: 8%;
            animation-delay: 0s;
        }

        .float-2 {
            width: 80px;
            height: 80px;
            bottom: 15%;
            left: 5%;
            animation-delay: 4s;
        }

        .float-3 {
            width: 60px;
            height: 60px;
            top: 60%;
            right: 15%;
            animation-delay: 2s;
        }

        /* Enhanced Loading States */
        .loading {
            opacity: 0.6;
            pointer-events: none;
            position: relative;
        }

            .loading::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                width: 24px;
                height: 24px;
                margin: -12px 0 0 -12px;
                border: 3px solid rgba(42, 125, 225, 0.3);
                border-top: 3px solid var(--primary-color);
                border-radius: var(--border-radius-full);
                animation: spin 1s linear infinite;
                z-index: 1;
            }

        /* Keyframe Animations */
        @@keyframes float {
            0%, 100%

        {
            transform: translateY(0px) rotate(0deg);
            opacity: 0.3;
        }

        50% {
            transform: translateY(-30px) rotate(180deg);
            opacity: 0.6;
        }

        }

        @@keyframes rotate {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        @@keyframes pulse {
            0%

        {
            transform: scale(1);
        }

        100% {
            transform: scale(1.05);
        }

        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Enhanced Responsive Design */
        @@media (max-width: 1200px) {
            .appointments-container

        {
            max-width: 100%;
            padding: 8rem 1rem;
        }

        .search-input-container {
            min-width: 250px;
        }

        }

        @@media (max-width: 992px) {
            .page-header h2

        {
            font-size: 2.5rem;
        }

        .controls {
            flex-direction: column;
            align-items: stretch;
            text-align: center;
        }

        .filters {
            justify-content: center;
        }

        .actions {
            justify-content: center;
        }

        .appointments-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }

        }

        @@media (max-width: 768px) {
            .page-header h2

        {
            font-size: 2rem;
        }

        .controls {
            padding: 1.5rem;
        }

        .search-form {
            flex-direction: column;
            width: 100%;
        }

        .search-input-container {
            min-width: 100%;
        }

        .appointments-table th:nth-child(1),
        .appointments-table td:nth-child(1) {
            display: none;
        }

        .date-display {
            flex-direction: row;
            gap: 0.5rem;
            min-width: auto;
            padding: 0.5rem;
        }

            .date-display .day {
                font-size: 1.5rem;
            }

        .patient-avatar {
            width: 40px;
            height: 40px;
        }

            .patient-avatar i {
                font-size: 1.1rem;
            }

        .modal-content {
            margin: 1rem;
            width: calc(100% - 2rem);
        }

        .modal-header {
            padding: 1.25rem 1.5rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1.25rem 1.5rem;
            flex-direction: column;
            gap: 0.75rem;
        }

            .modal-footer button {
                width: 100%;
                justify-content: center;
            }

        .form-row {
            flex-direction: column;
            gap: 0;
        }

        .toast {
            top: 1rem;
            right: 1rem;
            left: 1rem;
            max-width: calc(100% - 2rem);
            transform: translateY(-120%);
        }

            .toast.show {
                transform: translateY(0);
            }

        }

        @@media (max-width: 480px) {
            .appointments-container

        {
            padding: 8rem 0.75rem;
        }

        .page-header h2 {
            font-size: 1.75rem;
        }

        .subtitle {
            font-size: 1rem;
        }

        .controls {
            padding: 1rem;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            font-size: 0.825rem;
        }

        .btn-primary,
        .btn-secondary,
        .btn-danger,
        .btn-add-slot {
            padding: 0.75rem 1.25rem;
            font-size: 0.875rem;
        }

        .appointments-table th,
        .appointments-table td {
            padding: 1rem 0.75rem;
            font-size: 0.9rem;
        }

        .date-display .day {
            font-size: 1.25rem;
        }

        .date-display .month {
            font-size: 0.75rem;
        }

        .date-display .year {
            font-size: 0.7rem;
        }

        .patient-name {
            font-size: 0.9rem;
        }

        .patient-email {
            font-size: 0.8rem;
        }

        .btn-action {
            width: 35px;
            height: 35px;
            font-size: 0.85rem;
        }

        .status-badge {
            padding: 0.4rem 0.75rem;
            font-size: 0.8rem;
        }

        .empty-state {
            padding: 2.5rem 1.5rem;
        }

            .empty-state i {
                font-size: 3.5rem;
            }

            .empty-state h3 {
                font-size: 1.25rem;
            }

            .empty-state p {
                font-size: 1rem;
            }

        }

        /* Enhanced Focus States for Accessibility */
        .btn-primary:focus,
        .btn-secondary:focus,
        .btn-danger:focus,
        .btn-add-slot:focus,
        .btn-action:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        .form-control:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* Enhanced Dark Mode Support */
        @@media (prefers-color-scheme: dark) {
            : root

        {
            --light-bg: #0f172a;
            --card-bg: #1e293b;
            --light-border: #334155;
            --soft-border: #475569;
            --dark-text: #f1f5f9;
            --medium-text: #cbd5e1;
            --light-text: #94a3b8;
            --muted-text: #64748b;
        }

        .modal-overlay {
            background: rgba(0, 0, 0, 0.8);
        }

        }

        /* Print Styles */
        @@media print {
            .floating-element, .btn-action, .modal-overlay, .toast

        {
            display: none !important;
        }

        .appointments-container {
            padding: 0;
        }

        .table-container {
            box-shadow: none;
            border: 1px solid #ccc;
        }

        .controls {
            display: none;
        }

        }
    </style>
}

@section Scripts {
    <script>
        // Global variables
        let currentAppointmentId = null;

        // Modal functions
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
            trapFocus(modal);
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.remove('active');
            document.body.style.overflow = 'auto';

            // Clear any error messages
            const errorElements = modal.querySelectorAll('.error-message');
            errorElements.forEach(el => {
                el.style.display = 'none';
                const errorText = el.querySelector('.error-text');
                if (errorText) errorText.textContent = '';
            });

            // Reset form if it's the add modal
            if (modalId === 'addModal') {
                document.getElementById('addAppointmentForm').reset();
            }
        }

        function openAddModal() {
            // Set default values
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('appointmentDate').value = today;
            document.getElementById('startTime').value = '09:00';
            document.getElementById('endTime').value = '09:30';
            openModal('addModal');
        }

        function openCompleteModal(appointmentId) {
            currentAppointmentId = appointmentId;
            openModal('completeModal');
        }

        function openDeleteModal(appointmentId) {
            currentAppointmentId = appointmentId;
            openModal('deleteModal');
        }

        // Form validation
        function validateAppointmentForm() {
            const date = document.getElementById('appointmentDate').value;
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;

            // Clear previous errors
            hideFormError('addError');

            // Validate date
            if (!date) {
                showFormError('addError', 'Please select an appointment date.');
                return false;
            }

            const selectedDate = new Date(date);
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            if (selectedDate < today) {
                showFormError('addError', 'Appointment date cannot be in the past.');
                return false;
            }

            // Validate time
            if (!startTime || !endTime) {
                showFormError('addError', 'Please select both start and end times.');
                return false;
            }

            if (startTime >= endTime) {
                showFormError('addError', 'End time must be after start time.');
                return false;
            }

            // Validate appointment duration (at least 15 minutes)
            const start = new Date(`2000-01-01T${startTime}`);
            const end = new Date(`2000-01-01T${endTime}`);
            const diffMinutes = (end - start) / (1000 * 60);

            if (diffMinutes < 15) {
                showFormError('addError', 'Appointment duration must be at least 15 minutes.');
                return false;
            }

            if (diffMinutes > 480) { // 8 hours
                showFormError('addError', 'Appointment duration cannot exceed 8 hours.');
                return false;
            }

            return true;
        }

        function showFormError(errorId, message) {
            const errorElement = document.getElementById(errorId);
            const errorText = errorElement.querySelector('.error-text') || errorElement;

            if (errorElement.querySelector('.error-text')) {
                errorText.textContent = message;
            } else {
                errorElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
            }

            errorElement.style.display = 'block';
            errorElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function hideFormError(errorId) {
            const errorElement = document.getElementById(errorId);
            errorElement.style.display = 'none';

            const errorText = errorElement.querySelector('.error-text');
            if (errorText) {
                errorText.textContent = '';
            }
        }

        // Enhanced form submission with better error handling
        document.getElementById('addAppointmentForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            if (!validateAppointmentForm()) {
                return;
            }

            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            submitBtn.disabled = true;

            const formData = new FormData(this);

            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');

            const appointmentData = {
                AppointmentDate: formData.get('AppointmentDate'),
                StartTime: formData.get('StartTime') + ':00',
                EndTime: formData.get('EndTime') + ':00'
            };

            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token ? token.value : ''
                    },
                    body: JSON.stringify(appointmentData)
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Appointment slot added successfully!', 'success');
                    closeModal('addModal');

                    // Reload page after short delay to show new appointment
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showFormError('addError', result.message || 'Failed to add appointment slot. Please try again.');
                }
            } catch (error) {
                console.error('Error adding appointment:', error);
                showFormError('addError', 'An unexpected error occurred. Please check your connection and try again.');
            } finally {
                // Restore button state
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        function confirmComplete() {
            if (!currentAppointmentId) {
                showToast('Invalid appointment selected.', 'error');
                return;
            }

            // Show loading state
            const modal = document.getElementById('completeModal');
            const confirmBtn = modal.querySelector('.btn-primary');
            const originalText = confirmBtn.innerHTML;

            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Completing...';
            confirmBtn.disabled = true;

            // Set the appointment ID and submit the form
            document.getElementById('completeAppointmentId').value = currentAppointmentId;
            document.getElementById('completeForm').submit();
        }

        function confirmDelete() {
            if (!currentAppointmentId) {
                showToast('Invalid appointment selected.', 'error');
                return;
            }

            // Show loading state
            const modal = document.getElementById('deleteModal');
            const confirmBtn = modal.querySelector('.btn-danger');
            const originalText = confirmBtn.innerHTML;

            confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            confirmBtn.disabled = true;

            // Set the appointment ID and submit the form
            document.getElementById('deleteAppointmentId').value = currentAppointmentId;
            document.getElementById('deleteForm').submit();
        }

        function viewAppointment(appointmentId) {
            if (!appointmentId) {
                showToast('Invalid appointment selected.', 'error');
                return;
            }

            // Navigate to appointment details page
            window.location.href = `/Appointment/Details/${appointmentId}`;
        }

        // Enhanced toast notification system
        function showToast(message, type = 'success') {
            const toastId = `${type}Toast`;
            const toast = document.getElementById(toastId);

            if (!toast) {
                console.error(`Toast element with ID '${toastId}' not found`);
                return;
            }

            const toastMessage = toast.querySelector('.toast-message');
            if (toastMessage) {
                toastMessage.textContent = message;
            }

            // Remove any existing show class from other toasts
            document.querySelectorAll('.toast').forEach(t => t.classList.remove('show'));

            // Show the toast
            toast.classList.add('show');

            // Auto-hide after 4 seconds
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }

        // Enhanced modal event handlers
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    closeModal(overlay.id);
                }
            });
        });

        // Enhanced keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const openModal = document.querySelector('.modal-overlay.active');
                if (openModal) {
                    closeModal(openModal.id);
                }
            }
        });

        // Enhanced focus management for accessibility
        function trapFocus(modal) {
            const focusableElements = modal.querySelectorAll(
                'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])'
            );

            if (focusableElements.length === 0) return;

            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            // Focus trap event listener
            const handleTabKey = function(e) {
                if (e.key === 'Tab') {
                    if (e.shiftKey) {
                        if (document.activeElement === firstElement) {
                            lastElement.focus();
                            e.preventDefault();
                        }
                    } else {
                        if (document.activeElement === lastElement) {
                            firstElement.focus();
                            e.preventDefault();
                        }
                    }
                }
            };

            // Add event listener
            modal.addEventListener('keydown', handleTabKey);

            // Store the handler for cleanup
            modal._trapFocusHandler = handleTabKey;

            // Focus first element when modal opens
            setTimeout(() => {
                if (firstElement) {
                    firstElement.focus();
                }
            }, 100);
        }

        // Clean up focus trap when modal closes
        function cleanupFocusTrap(modal) {
            if (modal._trapFocusHandler) {
                modal.removeEventListener('keydown', modal._trapFocusHandler);
                delete modal._trapFocusHandler;
            }
        }

        // Enhanced modal close function with cleanup
        const originalCloseModal = closeModal;
        closeModal = function(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                cleanupFocusTrap(modal);
            }
            originalCloseModal(modalId);
        };

        // Form input enhancements
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-format time inputs
            const timeInputs = document.querySelectorAll('input[type="time"]');
            timeInputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value && this.value.length === 5) {
                        // Ensure proper format
                        const [hours, minutes] = this.value.split(':');
                        this.value = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
                    }
                });
            });

            // Date input validation
            const dateInput = document.getElementById('appointmentDate');
            if (dateInput) {
                dateInput.addEventListener('change', function() {
                    const selectedDate = new Date(this.value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    if (selectedDate < today) {
                        showFormError('addError', 'Please select a date that is today or in the future.');
                        this.value = '';
                    } else {
                        hideFormError('addError');
                    }
                });
            }

            // Time input validation
            const startTimeInput = document.getElementById('startTime');
            const endTimeInput = document.getElementById('endTime');

            function validateTimeInputs() {
                if (startTimeInput.value && endTimeInput.value) {
                    if (startTimeInput.value >= endTimeInput.value) {
                        showFormError('addError', 'End time must be after start time.');
                    } else {
                        hideFormError('addError');
                    }
                }
            }

            if (startTimeInput && endTimeInput) {
                startTimeInput.addEventListener('change', validateTimeInputs);
                endTimeInput.addEventListener('change', validateTimeInputs);
            }
        });


        // Enhanced loading states for better UX
        function showPageLoading() {
            const loadingOverlay = document.createElement('div');
            loadingOverlay.id = 'pageLoadingOverlay';
            loadingOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(248, 250, 255, 0.9);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 9999;
                backdrop-filter: blur(4px);
            `;

            loadingOverlay.innerHTML = `
                <div style="text-align: center; color: var(--primary-color);">
                    <div style="width: 40px; height: 40px; border: 4px solid rgba(42, 125, 225, 0.3); border-top: 4px solid var(--primary-color); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem;"></div>
                    <p style="margin: 0; font-weight: 600;">Processing...</p>
                </div>
            `;

            document.body.appendChild(loadingOverlay);
        }

        function hidePageLoading() {
            const loadingOverlay = document.getElementById('pageLoadingOverlay');
            if (loadingOverlay) {
                loadingOverlay.remove();
            }
        }

        // Show loading when forms are submitted
        document.querySelectorAll('form[asp-action]').forEach(form => {
            if (form.id !== 'addAppointmentForm') { // Skip AJAX form
                form.addEventListener('submit', function() {
                    showPageLoading();
                });
            }
        });

        // Enhanced error handling for network issues
        window.addEventListener('online', function() {
            showToast('Connection restored', 'success');
        });

        window.addEventListener('offline', function() {
            showToast('Connection lost. Please check your internet.', 'error');
        });

        // Performance optimization: Lazy load animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '50px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        // Observe table rows for smooth entry animations
        document.addEventListener('DOMContentLoaded', function() {
            const tableRows = document.querySelectorAll('.appointment-row');
            tableRows.forEach((row, index) => {
                row.style.animationDelay = `${index * 0.1}s`;
                observer.observe(row);
            });
        });

        // Accessibility improvements
        document.addEventListener('DOMContentLoaded', function() {
            // Add ARIA labels dynamically based on content
            const statusBadges = document.querySelectorAll('.status-badge');
            statusBadges.forEach(badge => {
                const status = badge.textContent.trim();
                badge.setAttribute('aria-label', `Appointment status: ${status}`);
            });

            // Enhance action buttons with better labels
            const actionButtons = document.querySelectorAll('.btn-action');
            actionButtons.forEach(button => {
                const icon = button.querySelector('i');
                if (icon && icon.classList.contains('fa-eye')) {
                    button.setAttribute('aria-label', 'View appointment details');
                } else if (icon && icon.classList.contains('fa-check')) {
                    button.setAttribute('aria-label', 'Mark appointment as completed');
                } else if (icon && icon.classList.contains('fa-trash')) {
                    button.setAttribute('aria-label', 'Delete appointment slot');
                }
            });
        });

        // Debug logging for development
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            console.log('Medical Appointments Dashboard loaded successfully');
            console.log('Available functions:', {
                openAddModal,
                openCompleteModal,
                openDeleteModal,
                viewAppointment,
                showToast,
                closeModal
            });
        }
    </script>
}