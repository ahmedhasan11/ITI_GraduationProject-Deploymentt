@using System.Linq
@model ITI_Hackathon.Models.ViewModels.ChatIndexViewModel
@inject Microsoft.AspNetCore.Identity.UserManager<ITI_Hackathon.Entities.ApplicationUser> UserManager
@{
    var currentUserId = UserManager.GetUserId(User);
    var isDoctor = User.IsInRole("Doctor");
}

<!-- Chat Container -->
<div class="chat-container">
    <!-- Chat Header -->
    <div class="chat-header" id="chatHeaderContent">
            @if (Model.ActiveRoom != null)
            {
                var activeThread = Model.Threads.FirstOrDefault(t => t.Id == Model.ActiveRoom.ThreadId);
                <div class="user-avatar">
                    <i class="fas fa-user-md"></i>
                </div>
                <div>
                    <h5 id="headerUserName">
                        @(isDoctor? activeThread?.PatientName : "Dr. " + activeThread?.DoctorName)
                    </h5>
                    <small id="headerUserRole">
                        @(isDoctor ? "Patient" : "Doctor")
                    </small>
                </div>
                <div class="ms-auto d-flex gap-2">
                    <button class="btn btn-sm btn-outline-light d-lg-none" id="toggleSidebar">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            }
            else
            {
                <div class="w-100 text-center text-muted">
                    <i class="fas fa-comments me-2"></i> Select a conversation
                </div>
            }
    </div>

    <div class="chat-layout position-relative">
        <!-- Sidebar: Chats List -->
        <aside class="chat-sidebar" id="chatSidebar">
            <div class="chat-sidebar-header">
                <input class="chat-search" placeholder="Search chats..." onkeyup="filterThreads(this)" />
            </div>
            <div class="chat-list" id="threadList">
                @foreach (var thread in Model.Threads)
                {
                    var displayName = isDoctor ? thread.PatientName : thread.DoctorName;
                    var role = isDoctor ? "Patient" : "Doctor";
                    var initials = displayName?.Length >= 2
                    ? displayName.Substring(0, 2).ToUpper()
                    : "US";

                    // compute last message time (fall back to UpdatedAt)
                    var lastMessage = (thread.Messages != null && thread.Messages.Any())
                    ? thread.Messages.OrderByDescending(m => m.SentAt).FirstOrDefault()
                    : null;
                    var lastTimeString = lastMessage != null
                    ? lastMessage.SentAt.ToLocalTime().ToString("HH:mm")
                    : (thread.UpdatedAt != DateTime.MinValue
                    ? thread.UpdatedAt.ToLocalTime().ToString("HH:mm")
                    : "");
                    <div class="chat-item @(Model.ActiveRoom?.ThreadId == thread.Id ? "active" : "")"
                         id="thread-@thread.Id"
                         data-user-name="@displayName"
                         data-user-role="@role"
                         data-thread-id="@thread.Id">
                        <div class="chat-avatar">
                            @initials
                        </div>
                        <div class="w-100">
                            <div class="chat-meta">
                                <span class="chat-name">@(isDoctor? thread.PatientName: "Dr. " + thread.DoctorName)</span>
                                <span class="small text-muted">@lastTimeString</span>
                            </div>
                            <div class="d-flex align-items-center justify-content-between">
                                <span class="chat-snippet">
                                    @(isDoctor ? "Patient" : "Doctor")
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </aside>

        <!-- Main: Conversation -->
        <main class="chat-main">
            <!-- Chat Messages -->
            <div class="chat-messages" id="messagesContainer">
                @if (Model.ActiveRoom != null)
                {
                    foreach (var m in Model.ActiveRoom.Messages)
                    {
                        <div class="message @(m.IsMine ? "sent" : "received")">
                            @m.Text
                            <div class="message-time">@m.SentAt.ToLocalTime().ToString("HH:mm")</div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-chat-state">
                        <i class="fas fa-comments fa-3x mb-3"></i>
                        <p class="h5">Welcome to your messages</p>
                        <p>Select a conversation to start messaging</p>
                    </div>
                }
            </div>

            <!-- Chat Input -->
            @if (Model.ActiveRoom != null)
            {
                <div class="chat-input" style="display: flex;">
                    <input type="text" placeholder="Type your message..." id="messageInput" onkeypress="handleKeyPress(event)">
                    <button onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            }
        </main>
    </div>
</div>

<input type="hidden" id="ActiveThreadId" value="@Model.ActiveRoom?.ThreadId" />

<!-- Render Anti-Forgery token so client JS can pick it up -->
<div style="display:none;">
    @Html.AntiForgeryToken()
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #2a7de1;
            --primary-dark: #1c65c1;
            --secondary-color: #3bbab5;
            --accent-color: #ff6b6b;
            --light-bg: #f8faff;
            --light-border: #e0e7ff;
            --dark-text: #1e293b;
            --light-text: #64748b;
            --gradient: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            --medical-gradient: linear-gradient(135deg, #2a7de1, #3bbab5, #4cd1c4);
            --card-gradient: linear-gradient(135deg, #ffffff, #f8faff);
            --shadow-sm: 0 4px 6px rgba(0, 0, 0, 0.04);
            --shadow-md: 0 8px 20px rgba(0, 0, 0, 0.08);
            --shadow-lg: 0 15px 40px rgba(0, 0, 0, 0.12);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            --footer-bg: #0f172a;
            --footer-color: #e2e8f0;
            --chat-bg: #f1f5f9;
            --message-sent: #e3f2fd;
            --message-received: #f8f9fa;
        }

        .chat-container {
            max-width: 92%;
            margin: 90px auto 20px;
            height: calc(100vh - 140px);
            display: flex;
            flex-direction: column;
            background: white;
            border-radius: 24px;
            box-shadow: var(--shadow-lg);
            overflow: hidden;
        }

        .chat-layout {
            display: flex;
            height: 100%;
            min-height: 0;
        }

        .chat-sidebar {
            width: 320px;
            border-right: 1px solid var(--light-border);
            background: #ffffff;
            display: flex;
            flex-direction: column;
        }

        .chat-sidebar-header {
            padding: 1rem 1.25rem;
            border-bottom: 1px solid var(--light-border);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chat-search {
            flex: 1;
            border: 1px solid var(--light-border);
            border-radius: 10px;
            padding: 0.5rem 0.75rem;
            font-size: 0.95rem;
            outline: none;
        }

        .chat-list {
            overflow-y: auto;
            padding: 0.5rem 0.25rem;
        }

        .chat-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1rem;
            border-radius: 12px;
            cursor: pointer;
            transition: var(--transition);
            margin: 0.25rem 0.5rem;
        }

            .chat-item:hover {
                background: var(--chat-bg);
            }

            .chat-item.active {
                background: rgba(42, 125, 225, 0.08);
                border: 1px solid var(--light-border);
            }

        .chat-avatar {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            background: var(--medical-gradient);
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
        }

        .chat-meta {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 0.5rem;
        }

        .chat-name {
            font-weight: 600;
        }

        .chat-snippet {
            font-size: 0.85rem;
            color: var(--light-text);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 180px;
        }

        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            min-width: 0;
        }

        .chat-header {
            background: var(--medical-gradient);
            color: white;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

            .chat-header .user-avatar {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.2);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
            }

            .chat-header h5 {
                margin: 0;
                font-weight: 600;
            }

            .chat-header small {
                opacity: 0.8;
            }

        .chat-messages {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background: var(--chat-bg);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            max-width: 70%;
            padding: 0.8rem 1.2rem;
            border-radius: 18px;
            position: relative;
            animation: messageSlide 0.3s ease;
        }

        @@keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.sent {
            background: var(--primary-color);
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background: var(--message-received);
            color: var(--dark-text);
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }

        .chat-input {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid var(--light-border);
            display: flex;
            gap: 1rem;
            align-items: center;
        }

            .chat-input input {
                flex: 1;
                border: 1px solid var(--light-border);
                border-radius: 25px;
                padding: 0.75rem 1.5rem;
                font-size: 1rem;
                outline: none;
                transition: var(--transition);
            }

                .chat-input input:focus {
                    border-color: var(--primary-color);
                    box-shadow: 0 0 0 3px rgba(42, 125, 225, 0.1);
                }

            .chat-input button {
                background: var(--medical-gradient);
                color: white;
                border: none;
                border-radius: 50%;
                width: 45px;
                height: 45px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: var(--transition);
            }

                .chat-input button:hover {
                    transform: scale(1.05);
                    box-shadow: var(--shadow-md);
                }

        .empty-chat-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: var(--light-text);
        }

            .empty-chat-state i {
                font-size: 3rem;
                margin-bottom: 1rem;
                opacity: 0.5;
            }

        @@media (max-width: 991.98px) {
            .chat-sidebar {
                position: absolute;
                z-index: 10;
                height: calc(100% - 68px);
                transform: translateX(-100%);
                transition: var(--transition);
                box-shadow: var(--shadow-lg);
                border-radius: 0 16px 16px 0;
            }

                .chat-sidebar.show {
                    transform: translateX(0);
                }

            .chat-main {
                flex: 1;
            }

            .chat-header {
                padding: 1rem;
            }

            .chat-messages {
                padding: 1rem;
            }

            .chat-input {
                padding: 1rem;
            }

            .message {
                max-width: 85%;
            }
        }

        @@media (max-width: 768px) {
            .chat-container {
                margin: 80px 10px 10px;
                height: calc(100vh - 100px);
                border-radius: 16px;
            }
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: var(--light-bg);
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 3px;
        }
    </style>
}

@section Scripts {
    <script>
        var currentUserId = '@currentUserId';

        function filterThreads(input) {
            var filter = input.value.toLowerCase();
            document.querySelectorAll('#threadList .chat-item').forEach(item => {
                var text = item.textContent.toLowerCase();
                item.style.display = text.includes(filter) ? '' : 'none';
            });
        }

        function selectThread(threadId, userName, userRole) {
            // Update active thread
            document.getElementById('ActiveThreadId').value = threadId;

            // Update UI classes
            document.querySelectorAll('#threadList .chat-item').forEach(item => {
                item.classList.remove('active');
            });

            const selectedThread = document.getElementById('thread-' + threadId);
            if (selectedThread) selectedThread.classList.add('active');

            // Update header information
            updateChatHeader(userName, userRole);

            // Load messages
            loadMessages(threadId);

            // On mobile, hide sidebar after selection
            if (window.innerWidth < 992) {
                document.getElementById('chatSidebar').classList.remove('show');
            }
        }

        function updateChatHeader(userName, userRole) {
            const headerContent = document.getElementById('chatHeaderContent');
            if (!headerContent) return;
            headerContent.innerHTML = `
                <div class="user-avatar">
                    <i class="fas fa-user-md"></i>
                </div>
                <div>
                    <h5 id="headerUserName">${userName}</h5>
                    <small id="headerUserRole">${userRole}</small>
                </div>
                <div class="ms-auto d-flex gap-2">
                    <button class="btn btn-sm btn-outline-light d-lg-none" id="toggleSidebar">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            `;

            // Reattach event listener to the toggle button
            const toggleBtn = document.getElementById('toggleSidebar');
            if (toggleBtn) {
                toggleBtn.addEventListener('click', function () {
                    document.getElementById('chatSidebar').classList.toggle('show');
                });
            }
        }

        async function loadMessages(threadId) {
            try {
                const res = await fetch(`/api/Chat/GetMessages/${threadId}`);
                if (!res.ok) {
                    console.error('Failed to load messages', res.status);
                    return;
                }
                const messages = await res.json();
                const container = document.getElementById('messagesContainer');
                container.innerHTML = '';

                if (!messages || messages.length === 0) {
                    container.innerHTML = `
                        <div class="empty-chat-state">
                            <i class="fas fa-envelope-open-text"></i>
                            <p>No messages yet</p>
                            <small>Start the conversation</small>
                        </div>`;
                    // Hide input if no messages? keep input visible as UX choice
                    return;
                }

                messages.forEach(m => {
                    const isMine = m.senderId === currentUserId;
                    const div = document.createElement('div');
                    div.className = `message ${isMine ? 'sent' : 'received'}`;
                    div.innerHTML = `
                        ${m.text}
                        <div class="message-time">${new Date(m.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                    `;
                    container.appendChild(div);
                });
                // scroll to bottom
                container.scrollTop = container.scrollHeight;

                // Show input area if hidden
                const inputArea = document.querySelector('.chat-input');
                if (inputArea) inputArea.style.display = 'flex';
            } catch (err) {
                console.error('Error loading messages', err);
            }
        }

        async function sendMessage() {
            var threadId = parseInt(document.getElementById('ActiveThreadId').value);
            var input = document.getElementById('messageInput');
            var text = input ? input.value.trim() : '';

            if (!text || !threadId) return;

            try {
                // Find antiforgery token if present
                const tokenEl = document.querySelector('input[name="__RequestVerificationToken"]');
                const token = tokenEl ? tokenEl.value : null;

                const headers = {
                    'Content-Type': 'application/json'
                };
                if (token) headers['RequestVerificationToken'] = token;

                const res = await fetch('/api/Chat/SendMessage', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify({
                        threadId: threadId,
                        text: text,
                        senderId: currentUserId
                    })
                });

                if (!res.ok) {
                    let errorText = '';
                    try { errorText = await res.json(); } catch (e) { errorText = await res.text(); }
                    console.error('Failed to send message', errorText);
                    alert('Failed to send message: ' + (errorText.message || JSON.stringify(errorText) || 'Unknown error'));
                    return;
                }

                if (input) input.value = '';
                await loadMessages(threadId);
            } catch (err) {
                console.error('Error sending message', err);
                alert('Error sending message: ' + err.message);
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        // Auto-refresh messages every 3 seconds
        setInterval(() => {
            var threadId = document.getElementById('ActiveThreadId').value;
            if (threadId) loadMessages(parseInt(threadId));
        }, 3000);

        // Attach click handlers and initialize on load
        window.addEventListener("DOMContentLoaded", () => {
            // Attach click listeners to chat items (avoids inline onclick escaping issues)
            document.querySelectorAll('#threadList .chat-item').forEach(item => {
                item.addEventListener('click', function () {
                    const threadId = parseInt(this.dataset.threadId || this.id.replace('thread-', ''));
                    const userName = this.dataset.userName || '';
                    const userRole = this.dataset.userRole || '';
                    selectThread(threadId, userName, userRole);
                });
            });

            var activeThread = document.getElementById('ActiveThreadId').value;
            if (activeThread) {
                const activeElement = document.getElementById('thread-' + activeThread);
                if (activeElement) {
                    const userName = activeElement.dataset.userName;
                    const userRole = activeElement.dataset.userRole;
                    updateChatHeader(userName, userRole);
                    loadMessages(parseInt(activeThread));
                    activeElement.classList.add('active');
                }
            }

            // Toggle sidebar on mobile (if toggle exists in initial markup)
            const toggleSidebarBtn = document.getElementById('toggleSidebar');
            const chatSidebar = document.getElementById('chatSidebar');
            if (toggleSidebarBtn) {
                toggleSidebarBtn.addEventListener('click', function () {
                    chatSidebar.classList.toggle('show');
                });
            }

            // Auto-focus message input
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.focus();
            }
        });
    </script>
}
